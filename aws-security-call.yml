AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation Stack to Trigger SMS Notification for Critical GuardDuty Alerts.

Resources:
  # SNS Topic
  CriticalAlertsSNSTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      TopicName: 'CriticalGuardDutyAlertsTopic'

  # SNS Subscription
  CriticalAlertsSubscription:
    Type: 'AWS::SNS::Subscription'
    Properties:
      Protocol: 'SMS'
      Endpoint: '+14149311784'  # Replace with the phone number to receive SMS notifications
      TopicArn: !Ref CriticalAlertsSNSTopic

  # IAM Role for Lambda Function
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'LambdaExecutionPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'sns:Publish'
                Resource: '*'

  # Lambda Function
  GuardDutyAlertLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: 'GuardDutyAlertFunction'
      Handler: 'index.lambda_handler'
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: 'python3.9'
      Timeout: 60
      Code:
        ZipFile: |
          import json
          import boto3

          sns_client = boto3.client('sns')
          topic_arn = '<Replace with SNS Topic ARN>'

          def lambda_handler(event, context):
              finding = event['detail']
              severity = finding['severity']
              description = finding['description']
              resource = finding['resource']['resourceType']
              account = finding['accountId']

              message = (f"Critical GuardDuty alert detected. "
                         f"Severity: {severity}. "
                         f"Description: {description}. "
                         f"Resource: {resource}. "
                         f"Account: {account}.")

              # Publish the message to the SNS topic
              sns_client.publish(
                  TopicArn=topic_arn,
                  Message=message
              )

              return {
                  'statusCode': 200,
                  'body': json.dumps('Notification sent!')
              }

  # EventBridge Rule to Trigger Lambda on GuardDuty Alerts
  GuardDutyEventRule:
    Type: 'AWS::Events::Rule'
    Properties:
      EventPattern:
        source:
          - 'aws.guardduty'
        detail-type:
          - 'GuardDuty Finding'
        detail:
          severity:
            numeric:
              - 8
              - 9
              - 10
      Targets:
        - Arn: !GetAtt GuardDutyAlertLambda.Arn
          Id: 'GuardDutyAlertTarget'
      State: 'ENABLED'

  # Lambda Permission for EventBridge Invocation
  LambdaInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !Ref GuardDutyAlertLambda
      Action: 'lambda:InvokeFunction'
      Principal: 'events.amazonaws.com'
      SourceArn: !GetAtt GuardDutyEventRule.Arn

Outputs:
  SNSTopicArn:
    Description: 'SNS Topic ARN for Critical GuardDuty Alerts'
    Value: !Ref CriticalAlertsSNSTopic

  LambdaFunctionName:
    Description: 'Name of the Lambda Function'
    Value: !Ref GuardDutyAlertLambda

  EventBridgeRuleName:
    Description: 'Name of the EventBridge Rule'
    Value: !Ref GuardDutyEventRule
