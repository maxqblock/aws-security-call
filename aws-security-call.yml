# Copyright (c) 2024 Maxwell Block
# This code is licensed under the MIT License.
# See the LICENSE file in the project root for license terms.

AWSTemplateFormatVersion: '2010-09-09'
Description: >
  CloudFormation template to create resources for processing GuardDuty alerts with email notifications via SNS and calls through Amazon Connect.

# The user will be prompted for these parameters before creating the stack
Parameters:
  SecurityPhoneNumber:
    Type: String
    Description: The security contact phone number that will be called.
    AllowedPattern: ^\+\d{11,15}$
    ConstraintDescription: "Phone number must be in the format +12345678901 with the + symbol included"
  ContactFlowId:
    Type: String
    Description: The Contact Flow ID from Amazon Connect.
  ConnectPhoneNumber:
    Type: String
    Description: The source phone number from Amazon Connect. 
    AllowedPattern: ^\+\d{11,15}$
    ConstraintDescription: "Phone number must be in the format +12345678901 with the + symbol included"
  EmailAddress:
    Type: String
    Description: The security contact email address to receive SNS notifications.
  ConnectInstanceId:
    Type: String
    Description: The ID of the Amazon Connect instance.

Resources:
  # SNS Topic
  MySNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: GuardDuty Alerts

  # Subscription for an email to the SNS Topic
  MySNSSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref MySNSTopic
      Protocol: email
      Endpoint: !Ref EmailAddress

  # IAM role for the Lambda function to execute
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: GuardDutyLambdaLogsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: 
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*:*"

        - PolicyName: GuardDutyLambdaSNSPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "sns:Publish"
                Resource: !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:*"

        - PolicyName: GuardDutyLambdaConnectPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "connect:StartOutboundVoiceContact"
                  - "connect:StopContact"
                  - "connect:ListInstances"
                  - "connect:DescribeInstance"
                  - "connect:GetContactAttributes"
                Resource: 
                  - !Sub "arn:aws:connect:${AWS::Region}:${AWS::AccountId}:instance/${ConnectInstanceId}/*"
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: 
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/connect/*"


  # Lambda function creation with the proper environment variables
  MyLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "GuardDutyAlertHandler"
      Role: !GetAtt LambdaExecutionRole.Arn
      Handler: "index.lambda_handler"
      Runtime: "python3.9"
      Code:
        ZipFile: |
          # Copyright (c) 2024 Maxwell Block
          # This code is licensed under the MIT License.
          # See the LICENSE file in the project root for license terms.

          import json
          import boto3
          import os

          def lambda_handler(event, context):
              # The event is a GuardDuty finding from EventBridge
              account_id = event.get('detail', {}).get('accountId', 'N/A')
              region = event.get('detail', {}).get('region', 'N/A')
              title = event.get('detail', {}).get('title', 'N/A')
              finding_type = event.get('detail', {}).get('type', 'N/A')
              event_time = event.get('detail', {}).get('updatedAt', 'N/A')
              
              # This is the message sent to emails
              message = (
                  f"GuardDuty Alert\n\n"
                  f"Account ID: {account_id}\n"
                  f"Region: {region}\n"
                  f"Title: {title}\n"
                  f"Type: {finding_type}\n"
                  f"Updated At: {event_time}\n"
              )
              
              sns_client = boto3.client('sns')

              sns_topic_arn = os.environ['SNS_TOPIC_ARN']
              
              response = sns_client.publish(
                  TopicArn=sns_topic_arn,
                  Message=message,
                  Subject='IMPORTANT GuardDuty Alert'
              )
              
              print("Message sent to SNS")

              # Converts the AWS account ID to be read off as a string 
              account_id_words = convert_number_to_words(account_id)
              
              # This is the spoken message read off in the call
              message_spoken = (
                  f"Hello, this is AWS notifying you of an important GuardDuty alert impacting your AWS environment. "
                  f"In {account_id_words} within the {region} region, we have detected {title}. "
                  f"Please take action and check your AWS environment for more details, thank you!"
              )
              
              connect_client = boto3.client('connect')

              # These are environment variables for Amazon Connect
              destination_phone_number = os.environ['DESTINATION_PHONE_NUMBER']
              contact_flow_id = os.environ['CONTACT_FLOW_ID']
              instance_id = os.environ['INSTANCE_ID']
              source_phone_number = os.environ['SOURCE_PHONE_NUMBER']
              
              # Initiate the outbound call
              response = connect_client.start_outbound_voice_contact(
                  DestinationPhoneNumber=destination_phone_number, 
                  ContactFlowId=contact_flow_id,  
                  InstanceId=instance_id, 
                  SourcePhoneNumber=source_phone_number,      
                  Attributes={
                      'messageToRead': message_spoken
                  }
              )
                  
              return {
                  'statusCode': 200,
                  'body': json.dumps('Called')
              }

          # Converts each number to a word
          def convert_number_to_words(number):
              number_map = {
                  '0': 'zero', '1': 'one', '2': 'two', '3': 'three', '4': 'four',
                  '5': 'five', '6': 'six', '7': 'seven', '8': 'eight', '9': 'nine'
              }
              return ' '.join(number_map[digit] for digit in str(number))

      Timeout: 120
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref MySNSTopic
          DESTINATION_PHONE_NUMBER: !Ref SecurityPhoneNumber
          CONTACT_FLOW_ID: !Ref ContactFlowId
          INSTANCE_ID: !Ref ConnectInstanceId
          SOURCE_PHONE_NUMBER: !Ref ConnectPhoneNumber
          EMAIL_ADDRESS: !Ref EmailAddress

  # Allowing EventBridge permissions to invoke the Lambda
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt MyLambdaFunction.Arn
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt MyEventBridgeRule.Arn

  # EventBridge Rule for specific severity GuardDuty findings
  MyEventBridgeRule:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
          - "aws.guardduty"
        detail-type:
          - "GuardDuty Finding"
        detail:
          severity:
            - 7
            - 8
            - 9
            - 10
      Targets:
        - Arn: !GetAtt MyLambdaFunction.Arn
          Id: "MyLambdaFunctionTarget"



